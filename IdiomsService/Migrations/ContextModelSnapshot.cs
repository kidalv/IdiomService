// <auto-generated />
using System;
using IdiomsService.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace IdiomsService.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("IdiomsService.Database.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("date");

                    b.Property<int>("IdiomId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("CommentId");

                    b.HasIndex("DateAdded")
                        .HasSortOrder(new[] { SortOrder.Descending });

                    b.HasIndex("IdiomId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.CommentLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("CommentId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsLike")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("CommentLikes");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.Favorite", b =>
                {
                    b.Property<int>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("IdiomId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("FavoriteId");

                    b.HasIndex("IdiomId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.Idiom", b =>
                {
                    b.Property<int>("IdiomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateChanged")
                        .HasColumnType("date");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<string>("Meaning")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Usage")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("IdiomId");

                    b.HasIndex("DateAdded")
                        .HasSortOrder(new[] { SortOrder.Descending });

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Idioms");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Locale")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NativeName")
                        .HasColumnType("text");

                    b.Property<string>("RegionCode")
                        .HasColumnType("text");

                    b.HasKey("LanguageId");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            LanguageId = 1,
                            Locale = "en",
                            Name = "English",
                            NativeName = "English",
                            RegionCode = "GB"
                        },
                        new
                        {
                            LanguageId = 2,
                            Locale = "fr",
                            Name = "French",
                            NativeName = "français",
                            RegionCode = "FR"
                        },
                        new
                        {
                            LanguageId = 3,
                            Locale = "de",
                            Name = "German",
                            NativeName = "Deutsch",
                            RegionCode = "DE"
                        },
                        new
                        {
                            LanguageId = 4,
                            Locale = "ja",
                            Name = "Japanese",
                            NativeName = "日本語",
                            RegionCode = "JP"
                        },
                        new
                        {
                            LanguageId = 5,
                            Locale = "ru",
                            Name = "Russian",
                            NativeName = "русский",
                            RegionCode = "RU"
                        },
                        new
                        {
                            LanguageId = 6,
                            Locale = "it",
                            Name = "Italian",
                            NativeName = "italiano",
                            RegionCode = "IT"
                        },
                        new
                        {
                            LanguageId = 7,
                            Locale = "pt",
                            Name = "Portuguese",
                            NativeName = "português",
                            RegionCode = "BR"
                        },
                        new
                        {
                            LanguageId = 8,
                            Locale = "zh",
                            Name = "Chinese",
                            NativeName = "中文",
                            RegionCode = "CN"
                        },
                        new
                        {
                            LanguageId = 9,
                            Locale = "ar",
                            Name = "Arabic",
                            NativeName = "العربية",
                            RegionCode = "SA"
                        },
                        new
                        {
                            LanguageId = 10,
                            Locale = "fa",
                            Name = "Persian",
                            NativeName = "فارسی",
                            RegionCode = "IR"
                        },
                        new
                        {
                            LanguageId = 11,
                            Locale = "pl",
                            Name = "Polish",
                            NativeName = "polski",
                            RegionCode = "PL"
                        },
                        new
                        {
                            LanguageId = 12,
                            Locale = "nl",
                            Name = "Dutch",
                            NativeName = "Nederlands",
                            RegionCode = "NL"
                        },
                        new
                        {
                            LanguageId = 13,
                            Locale = "id",
                            Name = "Indonesian",
                            NativeName = "Indonesia",
                            RegionCode = "ID"
                        },
                        new
                        {
                            LanguageId = 14,
                            Locale = "uk",
                            Name = "Ukrainian",
                            NativeName = "українська",
                            RegionCode = "UA"
                        },
                        new
                        {
                            LanguageId = 15,
                            Locale = "he",
                            Name = "Hebrew",
                            NativeName = "עברית",
                            RegionCode = "IL"
                        },
                        new
                        {
                            LanguageId = 16,
                            Locale = "sv",
                            Name = "Swedish",
                            NativeName = "svenska",
                            RegionCode = "SE"
                        },
                        new
                        {
                            LanguageId = 17,
                            Locale = "cs",
                            Name = "Czech",
                            NativeName = "čeština",
                            RegionCode = "CZ"
                        },
                        new
                        {
                            LanguageId = 18,
                            Locale = "ko",
                            Name = "Korean",
                            NativeName = "한국어",
                            RegionCode = "KR"
                        },
                        new
                        {
                            LanguageId = 19,
                            Locale = "vi",
                            Name = "Vietnamese",
                            NativeName = "Tiếng Việt",
                            RegionCode = "VN"
                        },
                        new
                        {
                            LanguageId = 20,
                            Locale = "ca",
                            Name = "Catalan",
                            NativeName = "català",
                            RegionCode = "ES"
                        },
                        new
                        {
                            LanguageId = 21,
                            Locale = "no",
                            Name = "Norwegian Bokmål",
                            NativeName = "norsk bokmål",
                            RegionCode = "NO"
                        },
                        new
                        {
                            LanguageId = 22,
                            Locale = "fi",
                            Name = "Finnish",
                            NativeName = "suomi",
                            RegionCode = "FI"
                        },
                        new
                        {
                            LanguageId = 23,
                            Locale = "hu",
                            Name = "Hungarian",
                            NativeName = "magyar",
                            RegionCode = "HU"
                        },
                        new
                        {
                            LanguageId = 24,
                            Locale = "tr",
                            Name = "Turkish",
                            NativeName = "Türkçe",
                            RegionCode = "TR"
                        },
                        new
                        {
                            LanguageId = 25,
                            Locale = "ro",
                            Name = "Romanian",
                            NativeName = "română",
                            RegionCode = "RO"
                        },
                        new
                        {
                            LanguageId = 26,
                            Locale = "da",
                            Name = "Danish",
                            NativeName = "dansk",
                            RegionCode = "DK"
                        },
                        new
                        {
                            LanguageId = 27,
                            Locale = "el",
                            Name = "Greek",
                            NativeName = "Ελληνικά",
                            RegionCode = "GR"
                        },
                        new
                        {
                            LanguageId = 28,
                            Locale = "th",
                            Name = "Thai",
                            NativeName = "ไทย",
                            RegionCode = "TH"
                        },
                        new
                        {
                            LanguageId = 29,
                            Locale = "hi",
                            Name = "Hindi",
                            NativeName = "हिन्दी",
                            RegionCode = "IN"
                        },
                        new
                        {
                            LanguageId = 30,
                            Locale = "bn",
                            Name = "Bangla",
                            NativeName = "বাংলা",
                            RegionCode = "BD"
                        },
                        new
                        {
                            LanguageId = 31,
                            Locale = "az",
                            Name = "Azerbaijani",
                            NativeName = "azərbaycan",
                            RegionCode = "AZ"
                        },
                        new
                        {
                            LanguageId = 32,
                            Locale = "sw",
                            Name = "Kiswahili",
                            NativeName = "Kiswahili",
                            RegionCode = "KE"
                        },
                        new
                        {
                            LanguageId = 33,
                            Locale = "kk",
                            Name = "Kazakh",
                            NativeName = "қазақ тілі",
                            RegionCode = "KZ"
                        },
                        new
                        {
                            LanguageId = 34,
                            Locale = "eo",
                            Name = "Esperanto",
                            NativeName = "Esperanto",
                            RegionCode = "EO"
                        },
                        new
                        {
                            LanguageId = 35,
                            Locale = "lt",
                            Name = "Lithuanian",
                            NativeName = "lietuvių",
                            RegionCode = "LT"
                        },
                        new
                        {
                            LanguageId = 36,
                            Locale = "sk",
                            Name = "Slovak",
                            NativeName = "slovenčina",
                            RegionCode = "SK"
                        },
                        new
                        {
                            LanguageId = 37,
                            Locale = "bg",
                            Name = "Bulgarian",
                            NativeName = "български",
                            RegionCode = "BG"
                        },
                        new
                        {
                            LanguageId = 38,
                            Locale = "sl",
                            Name = "Slovenian",
                            NativeName = "slovenščina",
                            RegionCode = "SI"
                        },
                        new
                        {
                            LanguageId = 39,
                            Locale = "eu",
                            Name = "Basque",
                            NativeName = "euskara",
                            RegionCode = "ES"
                        },
                        new
                        {
                            LanguageId = 40,
                            Locale = "et",
                            Name = "Estonian",
                            NativeName = "eesti",
                            RegionCode = "EE"
                        },
                        new
                        {
                            LanguageId = 41,
                            Locale = "hr",
                            Name = "Croatian",
                            NativeName = "hrvatski",
                            RegionCode = "HR"
                        },
                        new
                        {
                            LanguageId = 42,
                            Locale = "ms",
                            Name = "Malay",
                            NativeName = "Melayu",
                            RegionCode = "MY"
                        },
                        new
                        {
                            LanguageId = 43,
                            Locale = "ur",
                            Name = "Urdu",
                            NativeName = "اُردو",
                            RegionCode = "PK"
                        },
                        new
                        {
                            LanguageId = 44,
                            Locale = "ta",
                            Name = "Tamil",
                            NativeName = "தமிழ்",
                            RegionCode = "IN"
                        },
                        new
                        {
                            LanguageId = 45,
                            Locale = "te",
                            Name = "Telugu",
                            NativeName = "తెలుగు",
                            RegionCode = "IN"
                        },
                        new
                        {
                            LanguageId = 46,
                            Locale = "nn",
                            Name = "Norwegian Nynorsk",
                            NativeName = "nynorsk",
                            RegionCode = "NO"
                        },
                        new
                        {
                            LanguageId = 47,
                            Locale = "gl",
                            Name = "Galician",
                            NativeName = "galego",
                            RegionCode = "ES"
                        },
                        new
                        {
                            LanguageId = 48,
                            Locale = "af",
                            Name = "Afrikaans",
                            NativeName = "Afrikaans",
                            RegionCode = "ZA"
                        },
                        new
                        {
                            LanguageId = 49,
                            Locale = "bs",
                            Name = "Bosnian",
                            NativeName = "bosanski",
                            RegionCode = "BA"
                        },
                        new
                        {
                            LanguageId = 50,
                            Locale = "be",
                            Name = "Belarusian",
                            NativeName = "Беларуская",
                            RegionCode = "BY"
                        },
                        new
                        {
                            LanguageId = 51,
                            Locale = "lb",
                            Name = "Luxembourgish",
                            NativeName = "Lëtzebuergesch",
                            RegionCode = "LU"
                        },
                        new
                        {
                            LanguageId = 52,
                            Locale = "ml",
                            Name = "Malayalam",
                            NativeName = "മലയാളം",
                            RegionCode = "IN"
                        },
                        new
                        {
                            LanguageId = 53,
                            Locale = "ka",
                            Name = "Georgian",
                            NativeName = "ქართული",
                            RegionCode = "GE"
                        },
                        new
                        {
                            LanguageId = 54,
                            Locale = "is",
                            Name = "Icelandic",
                            NativeName = "íslenska",
                            RegionCode = "IS"
                        },
                        new
                        {
                            LanguageId = 55,
                            Locale = "sq",
                            Name = "Albanian",
                            NativeName = "shqip",
                            RegionCode = "AL"
                        },
                        new
                        {
                            LanguageId = 56,
                            Locale = "uz",
                            Name = "Uzbek",
                            NativeName = "o‘zbek",
                            RegionCode = "UZ"
                        },
                        new
                        {
                            LanguageId = 57,
                            Locale = "la",
                            Name = "Latin",
                            NativeName = "latīnum",
                            RegionCode = "LA"
                        },
                        new
                        {
                            LanguageId = 58,
                            Locale = "br",
                            Name = "Breton",
                            NativeName = "brezhoneg",
                            RegionCode = "FR"
                        },
                        new
                        {
                            LanguageId = 59,
                            Locale = "mk",
                            Name = "Macedonian",
                            NativeName = "македонски",
                            RegionCode = "MK"
                        },
                        new
                        {
                            LanguageId = 60,
                            Locale = "lv",
                            Name = "Latvian",
                            NativeName = "latviešu",
                            RegionCode = "LV"
                        },
                        new
                        {
                            LanguageId = 61,
                            Locale = "mr",
                            Name = "Marathi",
                            NativeName = "मराठी",
                            RegionCode = "IN"
                        },
                        new
                        {
                            LanguageId = 62,
                            Locale = "cy",
                            Name = "Welsh",
                            NativeName = "Cymraeg",
                            RegionCode = "GB"
                        },
                        new
                        {
                            LanguageId = 63,
                            Locale = "ku",
                            Name = "Central Kurdish",
                            NativeName = "کوردیی ناوەڕاست",
                            RegionCode = "IQ"
                        },
                        new
                        {
                            LanguageId = 64,
                            Locale = "jv",
                            Name = "Javanese",
                            NativeName = "Basa Jawa",
                            RegionCode = "ET"
                        },
                        new
                        {
                            LanguageId = 65,
                            Locale = "ga",
                            Name = "Irish",
                            NativeName = "Gaeilge",
                            RegionCode = "IE"
                        },
                        new
                        {
                            LanguageId = 66,
                            Locale = "hy",
                            Name = "Armenian",
                            NativeName = "Հայերեն",
                            RegionCode = "AM"
                        },
                        new
                        {
                            LanguageId = 67,
                            Locale = "sa",
                            Name = "Sanskrit",
                            NativeName = "संस्कृत",
                            RegionCode = "IN"
                        },
                        new
                        {
                            LanguageId = 68,
                            Locale = "as",
                            Name = "Assamese",
                            NativeName = "অসমীয়া",
                            RegionCode = "IN"
                        },
                        new
                        {
                            LanguageId = 69,
                            Locale = "my",
                            Name = "Burmese",
                            NativeName = "မြန်မာ",
                            RegionCode = "MM"
                        },
                        new
                        {
                            LanguageId = 70,
                            Locale = "kn",
                            Name = "Kannada",
                            NativeName = "ಕನ್ನಡ",
                            RegionCode = "IN"
                        },
                        new
                        {
                            LanguageId = 71,
                            Locale = "tt",
                            Name = "Tatar",
                            NativeName = "Татар",
                            RegionCode = "RU"
                        },
                        new
                        {
                            LanguageId = 72,
                            Locale = "gu",
                            Name = "Gujarati",
                            NativeName = "ગુજરાતી",
                            RegionCode = "IN"
                        },
                        new
                        {
                            LanguageId = 73,
                            Locale = "tg",
                            Name = "Tajik",
                            NativeName = "тоҷикӣ",
                            RegionCode = "TJ"
                        },
                        new
                        {
                            LanguageId = 74,
                            Locale = "aa",
                            Name = "Afar",
                            NativeName = "Qafar",
                            RegionCode = "ET"
                        },
                        new
                        {
                            LanguageId = 75,
                            Locale = "oc",
                            Name = "Occitan",
                            NativeName = "Occitan",
                            RegionCode = "FR"
                        },
                        new
                        {
                            LanguageId = 76,
                            Locale = "ba",
                            Name = "Bashkir",
                            NativeName = "Башҡорт",
                            RegionCode = "RU"
                        },
                        new
                        {
                            LanguageId = 77,
                            Locale = "fy",
                            Name = "Western Frisian",
                            NativeName = "Frysk",
                            RegionCode = "NL"
                        },
                        new
                        {
                            LanguageId = 78,
                            Locale = "mg",
                            Name = "Malagasy",
                            NativeName = "Malagasy",
                            RegionCode = "ET"
                        },
                        new
                        {
                            LanguageId = 79,
                            Locale = "gd",
                            Name = "Scottish Gaelic",
                            NativeName = "Gàidhlig",
                            RegionCode = "GB"
                        },
                        new
                        {
                            LanguageId = 80,
                            Locale = "pa",
                            Name = "Punjabi",
                            NativeName = "ਪੰਜਾਬੀ",
                            RegionCode = "IN"
                        },
                        new
                        {
                            LanguageId = 81,
                            Locale = "sd",
                            Name = "Sindhi",
                            NativeName = "سنڌي",
                            RegionCode = "PK"
                        },
                        new
                        {
                            LanguageId = 82,
                            Locale = "km",
                            Name = "Khmer",
                            NativeName = "ភាសាខ្មែរ",
                            RegionCode = "KH"
                        },
                        new
                        {
                            LanguageId = 83,
                            Locale = "am",
                            Name = "Amharic",
                            NativeName = "አማርኛ",
                            RegionCode = "ET"
                        },
                        new
                        {
                            LanguageId = 84,
                            Locale = "co",
                            Name = "Corsican",
                            NativeName = "Corsu",
                            RegionCode = "FR"
                        },
                        new
                        {
                            LanguageId = 85,
                            Locale = "dv",
                            Name = "Divehi",
                            NativeName = "ދިވެހިބަސް",
                            RegionCode = "MV"
                        },
                        new
                        {
                            LanguageId = 86,
                            Locale = "mi",
                            Name = "Maori",
                            NativeName = "te reo Māori",
                            RegionCode = "NZ"
                        },
                        new
                        {
                            LanguageId = 87,
                            Locale = "mt",
                            Name = "Maltese",
                            NativeName = "Malti",
                            RegionCode = "MT"
                        },
                        new
                        {
                            LanguageId = 88,
                            Locale = "ne",
                            Name = "Nepali",
                            NativeName = "नेपाली",
                            RegionCode = "NP"
                        },
                        new
                        {
                            LanguageId = 89,
                            Locale = "se",
                            Name = "Sami Northern",
                            NativeName = "davvisámegiella",
                            RegionCode = "NO"
                        },
                        new
                        {
                            LanguageId = 90,
                            Locale = "qu",
                            Name = "Quechua",
                            NativeName = "Runasimi",
                            RegionCode = "BO"
                        },
                        new
                        {
                            LanguageId = 91,
                            Locale = "ps",
                            Name = "Pashto",
                            NativeName = "پښتو",
                            RegionCode = "AF"
                        },
                        new
                        {
                            LanguageId = 92,
                            Locale = "rm",
                            Name = "Romansh",
                            NativeName = "rumantsch",
                            RegionCode = "CH"
                        },
                        new
                        {
                            LanguageId = 93,
                            Locale = "si",
                            Name = "Sinhala",
                            NativeName = "සිංහල",
                            RegionCode = "LK"
                        },
                        new
                        {
                            LanguageId = 94,
                            Locale = "tk",
                            Name = "Turkmen",
                            NativeName = "Türkmen dili",
                            RegionCode = "TM"
                        },
                        new
                        {
                            LanguageId = 95,
                            Locale = "hsb",
                            Name = "Upper Sorbian",
                            NativeName = "hornjoserbšćina",
                            RegionCode = "DE"
                        },
                        new
                        {
                            LanguageId = 96,
                            Locale = "yo",
                            Name = "Yoruba",
                            NativeName = "Èdè Yorùbá",
                            RegionCode = "NG"
                        },
                        new
                        {
                            LanguageId = 97,
                            Locale = "haw",
                            Name = "Hawaiian",
                            NativeName = "ʻŌlelo Hawaiʻi",
                            RegionCode = "US"
                        },
                        new
                        {
                            LanguageId = 98,
                            Locale = "wo",
                            Name = "Wolof",
                            NativeName = "Wolof",
                            RegionCode = "SN"
                        },
                        new
                        {
                            LanguageId = 99,
                            Locale = "ky",
                            Name = "Kyrgyz",
                            NativeName = "Кыргыз",
                            RegionCode = "KG"
                        },
                        new
                        {
                            LanguageId = 100,
                            Locale = "ig",
                            Name = "Igbo",
                            NativeName = "Igbo",
                            RegionCode = "NG"
                        },
                        new
                        {
                            LanguageId = 101,
                            Locale = "or",
                            Name = "Odia",
                            NativeName = "ଓଡ଼ିଆ",
                            RegionCode = "IN"
                        },
                        new
                        {
                            LanguageId = 102,
                            Locale = "gn",
                            Name = "Guarani",
                            NativeName = "Avañe’ẽ",
                            RegionCode = "PY"
                        },
                        new
                        {
                            LanguageId = 103,
                            Locale = "so",
                            Name = "Somali",
                            NativeName = "Soomaali",
                            RegionCode = "SO"
                        },
                        new
                        {
                            LanguageId = 104,
                            Locale = "ug",
                            Name = "Uyghur",
                            NativeName = "ئۇيغۇرچە",
                            RegionCode = "CN"
                        },
                        new
                        {
                            LanguageId = 105,
                            Locale = "ha",
                            Name = "Hausa",
                            NativeName = "Hausa",
                            RegionCode = "NG"
                        },
                        new
                        {
                            LanguageId = 106,
                            Locale = "sah",
                            Name = "Sakha",
                            NativeName = "Саха",
                            RegionCode = "RU"
                        },
                        new
                        {
                            LanguageId = 107,
                            Locale = "sn",
                            Name = "Shona",
                            NativeName = "chiShona",
                            RegionCode = "ET"
                        },
                        new
                        {
                            LanguageId = 108,
                            Locale = "lo",
                            Name = "Lao",
                            NativeName = "ລາວ",
                            RegionCode = "LA"
                        },
                        new
                        {
                            LanguageId = 109,
                            Locale = "iu",
                            Name = "Inuktitut",
                            NativeName = "Inuktitut",
                            RegionCode = "CA"
                        },
                        new
                        {
                            LanguageId = 110,
                            Locale = "bo",
                            Name = "Tibetan",
                            NativeName = "བོད་ཡིག",
                            RegionCode = "CN"
                        },
                        new
                        {
                            LanguageId = 111,
                            Locale = "om",
                            Name = "Oromo",
                            NativeName = "Oromoo",
                            RegionCode = "ET"
                        },
                        new
                        {
                            LanguageId = 112,
                            Locale = "ti",
                            Name = "Tigrinya",
                            NativeName = "ትግርኛ",
                            RegionCode = "ER"
                        },
                        new
                        {
                            LanguageId = 113,
                            Locale = "zu",
                            Name = "isiZulu",
                            NativeName = "isiZulu",
                            RegionCode = "ZA"
                        },
                        new
                        {
                            LanguageId = 114,
                            Locale = "rw",
                            Name = "Kinyarwanda",
                            NativeName = "Kinyarwanda",
                            RegionCode = "RW"
                        },
                        new
                        {
                            LanguageId = 115,
                            Locale = "xh",
                            Name = "isiXhosa",
                            NativeName = "isiXhosa",
                            RegionCode = "ZA"
                        },
                        new
                        {
                            LanguageId = 116,
                            Locale = "kl",
                            Name = "Greenlandic",
                            NativeName = "kalaallisut",
                            RegionCode = "GL"
                        },
                        new
                        {
                            LanguageId = 117,
                            Locale = "ts",
                            Name = "Xitsonga",
                            NativeName = "Xitsonga",
                            RegionCode = "ZA"
                        },
                        new
                        {
                            LanguageId = 118,
                            Locale = "st",
                            Name = "Sesotho",
                            NativeName = "Sesotho",
                            RegionCode = "ZA"
                        },
                        new
                        {
                            LanguageId = 119,
                            Locale = "ff",
                            Name = "Fulah",
                            NativeName = "Fulah",
                            RegionCode = "SN"
                        },
                        new
                        {
                            LanguageId = 120,
                            Locale = "tn",
                            Name = "Setswana",
                            NativeName = "Setswana",
                            RegionCode = "ZA"
                        },
                        new
                        {
                            LanguageId = 121,
                            Locale = "nqo",
                            Name = "N'ko",
                            NativeName = "ߒߞߏ",
                            RegionCode = "ET"
                        });
                });

            modelBuilder.Entity("IdiomsService.Database.Models.Link", b =>
                {
                    b.Property<int>("LinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("LinkTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("RelatedId")
                        .HasColumnType("integer");

                    b.Property<int>("RootId")
                        .HasColumnType("integer");

                    b.HasKey("LinkId");

                    b.HasIndex("LinkTypeId");

                    b.HasIndex("RelatedId");

                    b.HasIndex("RootId");

                    b.ToTable("Links");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.LinkType", b =>
                {
                    b.Property<int>("LinkTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LinkTypeId");

                    b.ToTable("LinkTypes");

                    b.HasData(
                        new
                        {
                            LinkTypeId = 1,
                            Name = "Translation"
                        },
                        new
                        {
                            LinkTypeId = 2,
                            Name = "Similar"
                        },
                        new
                        {
                            LinkTypeId = 3,
                            Name = "Variation"
                        });
                });

            modelBuilder.Entity("IdiomsService.Database.Models.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("RatingId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.RefreshToken", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("TokenId");

                    b.HasIndex("UserId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("IdiomId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("ReportId");

                    b.HasIndex("IdiomId");

                    b.HasIndex("UserId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("IdiomId")
                        .HasColumnType("integer");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("RequestId");

                    b.HasIndex("IdiomId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            Name = "Moderator"
                        },
                        new
                        {
                            RoleId = 3,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("IdiomsService.Database.Models.Upvote", b =>
                {
                    b.Property<int>("UpvoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("IdiomId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsUpvote")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("UpvoteId");

                    b.HasIndex("IdiomId");

                    b.HasIndex("UserId");

                    b.ToTable("Upvotes");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsGoogle")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Registered")
                        .HasColumnType("date");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.UserLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLanguages");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.Comment", b =>
                {
                    b.HasOne("IdiomsService.Database.Models.Idiom", "Idiom")
                        .WithMany("Comment")
                        .HasForeignKey("IdiomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdiomsService.Database.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Idiom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.CommentLike", b =>
                {
                    b.HasOne("IdiomsService.Database.Models.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdiomsService.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.Favorite", b =>
                {
                    b.HasOne("IdiomsService.Database.Models.Idiom", "Idiom")
                        .WithMany("Favorites")
                        .HasForeignKey("IdiomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdiomsService.Database.Models.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Idiom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.Idiom", b =>
                {
                    b.HasOne("IdiomsService.Database.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdiomsService.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.Link", b =>
                {
                    b.HasOne("IdiomsService.Database.Models.LinkType", "LinkType")
                        .WithMany()
                        .HasForeignKey("LinkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdiomsService.Database.Models.Idiom", "Related")
                        .WithMany()
                        .HasForeignKey("RelatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdiomsService.Database.Models.Idiom", "Root")
                        .WithMany("Links")
                        .HasForeignKey("RootId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LinkType");

                    b.Navigation("Related");

                    b.Navigation("Root");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.Rating", b =>
                {
                    b.HasOne("IdiomsService.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.RefreshToken", b =>
                {
                    b.HasOne("IdiomsService.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.Report", b =>
                {
                    b.HasOne("IdiomsService.Database.Models.Idiom", "Idiom")
                        .WithMany("Report")
                        .HasForeignKey("IdiomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdiomsService.Database.Models.User", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Idiom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.Request", b =>
                {
                    b.HasOne("IdiomsService.Database.Models.Idiom", "Idiom")
                        .WithMany("Requests")
                        .HasForeignKey("IdiomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdiomsService.Database.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdiomsService.Database.Models.User", "User")
                        .WithMany("Requests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Idiom");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.Upvote", b =>
                {
                    b.HasOne("IdiomsService.Database.Models.Idiom", "Idiom")
                        .WithMany("Upvotes")
                        .HasForeignKey("IdiomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdiomsService.Database.Models.User", "User")
                        .WithMany("Upvotes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Idiom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.User", b =>
                {
                    b.HasOne("IdiomsService.Database.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.UserLanguage", b =>
                {
                    b.HasOne("IdiomsService.Database.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdiomsService.Database.Models.User", "User")
                        .WithMany("Languages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.Idiom", b =>
                {
                    b.Navigation("Comment");

                    b.Navigation("Favorites");

                    b.Navigation("Links");

                    b.Navigation("Report");

                    b.Navigation("Requests");

                    b.Navigation("Upvotes");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Favorites");

                    b.Navigation("Languages");

                    b.Navigation("Reports");

                    b.Navigation("Requests");

                    b.Navigation("Upvotes");
                });
#pragma warning restore 612, 618
        }
    }
}
