// <auto-generated />
using System;
using IdiomsService.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace IdiomsService.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20210115184419_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("IdiomsService.Database.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("date");

                    b.Property<int>("IdiomId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("CommentId");

                    b.HasIndex("DateAdded")
                        .HasSortOrder(new[] { SortOrder.Descending });

                    b.HasIndex("IdiomId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.Favorite", b =>
                {
                    b.Property<int>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("IdiomId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("FavoriteId");

                    b.HasIndex("IdiomId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.Idiom", b =>
                {
                    b.Property<int>("IdiomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateChanged")
                        .HasColumnType("date");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<string>("Meaning")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Usage")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("IdiomId");

                    b.HasIndex("DateAdded")
                        .HasSortOrder(new[] { SortOrder.Descending });

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Idioms");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("LanguageFamilyId")
                        .HasColumnType("integer");

                    b.Property<string>("Locale")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LanguageId");

                    b.HasIndex("LanguageFamilyId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.LanguageFamily", b =>
                {
                    b.Property<int>("LanguageFamilyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LanguageFamilyId");

                    b.ToTable("LanguageFamilies");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.Link", b =>
                {
                    b.Property<int>("LinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("LinkTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("RelatedId")
                        .HasColumnType("integer");

                    b.Property<int>("RootId")
                        .HasColumnType("integer");

                    b.HasKey("LinkId");

                    b.HasIndex("LinkTypeId");

                    b.HasIndex("RelatedId");

                    b.HasIndex("RootId");

                    b.ToTable("Links");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.LinkType", b =>
                {
                    b.Property<int>("LinkTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LinkTypeId");

                    b.ToTable("LinkTypes");

                    b.HasData(
                        new
                        {
                            LinkTypeId = 1,
                            Name = "Translation"
                        },
                        new
                        {
                            LinkTypeId = 2,
                            Name = "Similar"
                        },
                        new
                        {
                            LinkTypeId = 3,
                            Name = "Variation"
                        });
                });

            modelBuilder.Entity("IdiomsService.Database.Models.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("RatingId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.RefreshToken", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("TokenId");

                    b.HasIndex("UserId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("IdiomId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("ReportId");

                    b.HasIndex("IdiomId");

                    b.HasIndex("UserId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("IdiomId")
                        .HasColumnType("integer");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("RequestId");

                    b.HasIndex("IdiomId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            Name = "Moderator"
                        },
                        new
                        {
                            RoleId = 3,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("IdiomsService.Database.Models.Upvote", b =>
                {
                    b.Property<int>("UpvoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("IdiomId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsUpvote")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("UpvoteId");

                    b.HasIndex("IdiomId");

                    b.HasIndex("UserId");

                    b.ToTable("Upvotes");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsGoogle")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Registered")
                        .HasColumnType("date");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.UserLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLanguages");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.Comment", b =>
                {
                    b.HasOne("IdiomsService.Database.Models.Idiom", "Idiom")
                        .WithMany("Comment")
                        .HasForeignKey("IdiomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdiomsService.Database.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Idiom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.Favorite", b =>
                {
                    b.HasOne("IdiomsService.Database.Models.Idiom", "Idiom")
                        .WithMany("Favorites")
                        .HasForeignKey("IdiomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdiomsService.Database.Models.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Idiom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.Idiom", b =>
                {
                    b.HasOne("IdiomsService.Database.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdiomsService.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.Language", b =>
                {
                    b.HasOne("IdiomsService.Database.Models.LanguageFamily", "LanguageFamily")
                        .WithMany()
                        .HasForeignKey("LanguageFamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LanguageFamily");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.Link", b =>
                {
                    b.HasOne("IdiomsService.Database.Models.LinkType", "LinkType")
                        .WithMany()
                        .HasForeignKey("LinkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdiomsService.Database.Models.Idiom", "Related")
                        .WithMany()
                        .HasForeignKey("RelatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdiomsService.Database.Models.Idiom", "Root")
                        .WithMany("Links")
                        .HasForeignKey("RootId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LinkType");

                    b.Navigation("Related");

                    b.Navigation("Root");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.Rating", b =>
                {
                    b.HasOne("IdiomsService.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.RefreshToken", b =>
                {
                    b.HasOne("IdiomsService.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.Report", b =>
                {
                    b.HasOne("IdiomsService.Database.Models.Idiom", "Idiom")
                        .WithMany("Report")
                        .HasForeignKey("IdiomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdiomsService.Database.Models.User", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Idiom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.Request", b =>
                {
                    b.HasOne("IdiomsService.Database.Models.Idiom", "Idiom")
                        .WithMany("Requests")
                        .HasForeignKey("IdiomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdiomsService.Database.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdiomsService.Database.Models.User", "User")
                        .WithMany("Requests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Idiom");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.Upvote", b =>
                {
                    b.HasOne("IdiomsService.Database.Models.Idiom", "Idiom")
                        .WithMany("Upvotes")
                        .HasForeignKey("IdiomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdiomsService.Database.Models.User", "User")
                        .WithMany("Upvotes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Idiom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.User", b =>
                {
                    b.HasOne("IdiomsService.Database.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.UserLanguage", b =>
                {
                    b.HasOne("IdiomsService.Database.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdiomsService.Database.Models.User", "User")
                        .WithMany("Languages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.Idiom", b =>
                {
                    b.Navigation("Comment");

                    b.Navigation("Favorites");

                    b.Navigation("Links");

                    b.Navigation("Report");

                    b.Navigation("Requests");

                    b.Navigation("Upvotes");
                });

            modelBuilder.Entity("IdiomsService.Database.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Favorites");

                    b.Navigation("Languages");

                    b.Navigation("Reports");

                    b.Navigation("Requests");

                    b.Navigation("Upvotes");
                });
#pragma warning restore 612, 618
        }
    }
}
